// Helper function to check if a URL is valid
function isValidHttpUrl(string) {
    const regex = /^((https?:\/\/)?(?:[a-z0-9-]+\.)+[a-z0-9]{2,6}(?:\/[^/]*?)*$)/i;
    return regex.test(string);
}

// Placeholder function for getting the result
async function getResult(url) {
    const encodedURL = btoa(url).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    const proxyUrl = `https://urlproxytesting-production.up.railway.app/?eURL=${encodedURL}`;

    try {
        const response = await fetch(proxyUrl);
        const data = await response.json();
        let finalData;
        if (data.data.attributes.last_analysis_stats.malicious > 0) {
            finalData = 'mal';
        } else if (data.data.attributes.last_analysis_stats.suspicious > 0) {
            finalData = 'sus';
        } else {
            finalData = 'ok';
        }
        // Your implementation for extracting the result from the data.
        // Assuming 'data.result' contains the desired value.
        return finalData;
    } catch (error) {
        console.error('Error fetching data from proxy server:', error);
        return 'error';
    }
}


// Main event listener
chrome.webNavigation.onCompleted.addListener(async (details) => {
    const tabId = details.tabId;
    const url = details.url;

    if (isValidHttpUrl(url)) {
        const baseUrl = new URL(url).origin;

        chrome.storage.sync.get("key", async (data) => {
            const storedData = data.key || {};

            if (!Object.keys(storedData).find((storedURL) => baseUrl.startsWith(storedURL))) {
                const result = await getResult(baseUrl);
                const currentDate = new Date();
                const timestamp = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, "0")}-${String(currentDate.getDate()).padStart(2, "0")}`;

                storedData[baseUrl] = {
                    url: baseUrl,
                    timestamp: timestamp,
                    result: result
                };

                chrome.storage.sync.set({ key: storedData }, () => {
                    console.log("New entry saved:", baseUrl);
                });
            }
        });
    }
});
