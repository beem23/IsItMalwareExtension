function isValidHttpUrl(t) {
    return /^((https?:\/\/)?(?:[a-z0-9-]+\.)+[a-z0-9]{2,6}(?:\/[^/]*?)*$)/i.test(t)
}

function switchIcon(result, tabId) {
    if (result) {
        switch (result) {
            case "mal":
                iconPath = {
                    "16": "icons/icon-mal-16.png",
                    "32": "icons/icon-mal-32.png",
                    "48": "icons/icon-mal-48.png",
                    "128": "icons/icon-mal-128.png"
                };
                break;
            case "sus":
                iconPath = {
                    "16": "icons/icon-sus-16.png",
                    "32": "icons/icon-sus-32.png",
                    "48": "icons/icon-sus-48.png",
                    "128": "icons/icon-sus-128.png"
                };
                break;
            default:
                iconPath = {
                    "16": "icons/icon-default-16.png",
                    "32": "icons/icon-default-32.png",
                    "48": "icons/icon-default-48.png",
                    "128": "icons/icon-default-128.png"
                };
                break;
        }
        chrome.action.setIcon({
            path: iconPath,
            tabId: tabId
        });
    }
}

async function getResult(url, tabId) {
    const encodedURL = btoa(url).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    const proxyUrl = `https://urlproxytesting-production.up.railway.app/?eURL=${encodedURL}`;

    try {
        const response = await fetch(proxyUrl);
        const data = await response.json();
        let finalData;
        if (data.data.attributes.last_analysis_stats.malicious > 0) {
            finalData = 'mal';
            switchIcon(finalData, tabId);
        } else if (data.data.attributes.last_analysis_stats.suspicious > 0) {
            finalData = 'sus';
            switchIcon(finalData, tabId);
        } else {
            finalData = 'ok';
            switchIcon(finalData, tabId);
        }
        return finalData;
    } catch (error) {
        console.error('Error fetching data from proxy server:', error);
        return 'error';
    }
}

function removeOldEntries(storedData) {
    const currentDate = new Date();
    const thirtyDaysAgo = new Date(currentDate.getTime() - 30 * 24 * 60 * 60 * 1000);
    for (let key in storedData) {
        const timestamp = new Date(storedData[key].timestamp);
        if (timestamp < thirtyDaysAgo) {
            delete storedData[key];
        }
    }
}

chrome.webNavigation.onCompleted.addListener(async (details) => {
    const tabId = details.tabId;
    const url = details.url;

    if (isValidHttpUrl(url)) {
        const baseUrl = new URL(url).origin;

        chrome.storage.sync.get("key", async (data) => {
            const storedData = data.key || {};

            removeOldEntries(storedData);

            if (!Object.keys(storedData).find((storedURL) => baseUrl.startsWith(storedURL))) {
                const result = await getResult(baseUrl, tabId);
                const currentDate = new Date();
                const timestamp = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, "0")}-${String(currentDate.getDate()).padStart(2, "0")}`;

                storedData[baseUrl] = {
                    url: baseUrl,
                    timestamp: timestamp,
                    result: result
                };

                chrome.storage.sync.set({ key: storedData }, () => {
                    console.log("New entry saved:", baseUrl);
                });
            } else {
                const result = storedData[baseUrl].result;
                switchIcon(result, tabId);
            }
        });
    }
});


